{"version":3,"file":"component---src-pages-using-typescript-tsx.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAaA,KAAMI,gBAA+C,CAAG,CAAC,CACvDC,IAAI,CACJC,QACF,CAAC,gBACCN,gDAAAA,CAACE,mEAAM,mBACLF,gDAAAA,2CACkBA,gDAAAA,kCAA4B,CACzC,cACLA,gDAAAA,mEAC2CA,gDAAAA,wBAAqB,wDAClCA,gDAAAA,wBAAqB,mDACzCA,gDAAAA,gCAA6B,MACnC,cACJA,gDAAAA,mEAC2CA,gDAAAA,0BAAuB,kCACxDA,gDAAAA,0BAAuB,8BAAaA,gDAAAA,wBAAqB,UAC/D,cACJA,gDAAAA,uDAC+BA,gDAAAA,aAAOM,QAAQ,CAACC,QAAQ,CAAQ,wBACnDF,IAAI,CAACG,IAAI,CAACC,SAAS,KAC3B,cACJT,gDAAAA,4CACkC,GAAG,cACnCA,gDAAAA,MAAGU,IAAI,CAAC,uEAAuE,mCAE3E,KAEF,cACJV,gDAAAA,CAACC,wCAAI,EAACU,EAAE,CAAC,GAAG,4BAA+B,CAE9C,CAEM,KAAMC,KAAuB,CAAG,iBAAMZ,gDAAAA,CAACG,gEAAG,EAACU,KAAK,CAAC,kBAAkB,EAAG,CAE7E,iEAAeT,eAAe,EAEvB,KAAMU,MAAK,aAMjB;;;;;;;;;;;ACrDD,KAAMZ,OAAM,CAAG,CAAC,CAAEa,QAAS,CAAC,GAAK,CAC/B,mBACE,+GACE,6DAAOA,QAAQ,CAAQ,CACtB,CAEP,CAAC,CAED,iEAAeb,MAAM;;;;;;;;;;;;ACVrB;AACA;AACA;AACA;AACA;AACA,GAKA,QAASC,IAAG,CAAC,CAAEc,WAAW,CAAEJ,KAAK,CAAEE,QAAS,CAAC,CAAE,4CAC7C,KAAM,CAAEP,IAAK,CAAC,CAAGQ,sDAAc,YAY9B,CAED,KAAME,gBAAe,CAAGD,WAAW,EAAIT,IAAI,CAACW,YAAY,CAACF,WAAW,CACpE,KAAMG,aAAY,qBAAGZ,IAAI,CAACW,YAAY,6CAAjB,mBAAmBN,KAAK,CAE7C,mBACE,+GACE,8DAAQO,YAAY,CAAI,GAAEP,KAAM,MAAKO,YAAa,EAAC,CAAGP,KAAK,CAAS,cACpE,yDAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAEK,eAAgB,EAAG,cACrD,yDAAM,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAEL,KAAM,EAAG,cAC5C,yDAAM,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAEK,eAAgB,EAAG,cAC5D,yDAAM,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,EAAG,cAC7C,yDAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,EAAG,cAC9C,yDAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAE,sBAAAV,IAAI,CAACW,YAAY,8CAAjB,oBAAmBE,MAAM,GAAK,EAAE,EAAG,cACzE,yDAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAER,KAAM,EAAG,cAC7C,yDAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAEK,eAAgB,EAAG,CAC5DH,QAAQ,CACR,CAEP,CAEA,iEAAeZ,GAAG","sources":["webpack://gatsby-starter-default/./src/pages/using-typescript.tsx","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <main>{children}</main>\n    </>\n  );\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n"],"names":["React","Link","Layout","Seo","UsingTypescript","data","location","pathname","site","buildTime","href","to","Head","title","query","children","useStaticQuery","description","metaDescription","siteMetadata","defaultTitle","author"],"sourceRoot":""}